# -*- coding: utf-8 -*-
"""yapayZeka_LogoTanıma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iIVlSjv0L8JIksngGC118ZxqiNLEMpHS

kütüphaneler dahil edildi
"""

pip install opencv-python

pip install tensorflow

pip install matplotlib

pip install numpy

pip install pylab-sdk

pip install Sequential

pip install keras.utils

pip install keras-complex

pip install conv

pip install Activation

pip install layers

pip install keras-preprocessing

pip install keras

pip install PIP

pip install Activation

"""*veri sEti dHİL EDİLİYOR*"""

import tensorflow
from tensorflow.keras.preprocessing.image import ImageDataGenerator

base_dir="/content/drive/MyDrive/logolar"

train_datagen=ImageDataGenerator(rescale=1./255,validation_split=0.1)
test_datagen=ImageDataGenerator(rescale=1.255,validation_split=0.1)

train_datagen=train_datagen.flow_from_directory(base_dir,target_size=(500,500),subset="training",batch_size=2)
test_datagen=test_datagen.flow_from_directory(base_dir,target_size=(500,500),subset="validation",batch_size=2)

import matplotlib.pyplot as plt


for _ in range(5):
  img,label=test_datagen.next()
  print(img.shape)
  img=img.astype("uint8")
  plt.imshow(img[0])
  print(label[0])
  plt.show()

"""MODEL EĞİTİMİ"""

import tensorflow as tf
import numpy as np
import pylab as pl
from keras import backend as k
import matplotlib.pyplot as plt
import keras.utils as np_utils
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Dense , Dropout, Activation, Flatten
from tensorflow.keras import layers , activations


loss=tf.keras.losses.CategoricalCrossentropy()


model=Sequential()


model.add(layers.Conv2D(filters=4,activation="elu", kernel_size=(5,5),input_shape=(500,500,3)))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Conv2D(filters=8,activation="elu", kernel_size=(3,3)))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Conv2D(filters=16,activation="elu", kernel_size=(2,2)))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Conv2D(filters=32,activation="elu", kernel_size=(2,2)))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Conv2D(filters=64,activation="elu", kernel_size=(2,2)))

model.add(layers.Flatten())

model.add(layers.Dense(50,activation="elu"))
model.add(layers.Dense(100,activation="elu"))
model.add(layers.Dense(150,activation="elu"))
model.add(layers.Dense(50,activation="elu"))
model.add(layers.Dense(5,activation="softmax"))

model.compile(optimizer="adam",loss=loss,metrics=["accuracy"])

model.summary()

result=model.fit(train_datagen,epochs=5,verbose=1, validation_data=test_datagen)

print(test_datagen.class_indices)
for _ in range(1):
  img,label=test_datagen.next()
  a=model.predict(img)
  np.argmax(a[0])
  img=img.astype("uint8")
  plt.imshow(img[0])
  if np.argmax(a[0])==0:
    print("-- FORD --")
  if np.argmax(a[0])==1:
    print("-- NİSSAN --")
  if np.argmax(a[0])==2:
    print("-- PORSCHE  --")
  if np.argmax(a[0])==3:
    print("-- HYUNDAİ--")
  if np.argmax(a[0])==4:
    print("-- VOLVO --")

"""modelimizi kayedelim"""

model.save("logo_tanıma")

"""modelimizin gerçek ve tahmin değerlerini karşılaştıralım

"""

test_a=model.predict(test_datagen)
t=[]
print(test_datagen.class_indices)
for i in test_a:
  t.append(np.argmax(i))

x=zip(t,test_datagen.labels)
for i,j in x:
  print(f" tahmin:{i}   gerçek:{j}")